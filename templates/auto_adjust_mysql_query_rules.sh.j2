#!/bin/bash

#Author DBA R

#if [ $# -ne 1 ]

#then

#    echo "usage: `basename $0` [mysql_monitor_password]"

#    exit 1

#fi

#source /etc/profile

#export MYSQL_PWD=${1}

#向钉钉发送消息方法
function SendMessageToDingding()
{ # 发送钉钉消息
Dingding_Url="https://oapi.dingtalk.com/robot/send?access_token=f333b3f832ac4e91f7906acb35eabbb538595e440c68b69cd71a25197509d509" 
curl "${Dingding_Url}" -H 'Content-Type: application/json' -d "
 { \"msgtype\":\"text\",
\"text\":{
\"content\":\"${1}\"},
\"at\":{
\"atMobiles\":[\"15668661298\"],
\"isAtAll\":false} }"
}

function auto_adjust_mysql_query_rules() {

c=2

offline_mysql_count=`mysql --login-path=proxysql \
-e "select count(distinct(a.srv_host)) as count_offline_mysql from stats_mysql_connection_pool a join mysql_group_replication_hostgroups b on a.hostgroup=b.offline_hostgroup\G;"\
 | grep count_offline_mysql: | awk '{ printf $2 }'`

query_active=`mysql --login-path=proxysql \
-e "select active from mysql_query_rules where destination_hostgroup is not null and destination_hostgroup <> 10\G;"\
 | grep active: | awk '{ printf $2 }'`

if [ ${offline_mysql_count} -gt 0 -o ${query_active} -ne 1 ] ; then

   mysql_count=`mysql --login-path=proxysql \
-e "select count(distinct(srv_host)) as count_mysql from stats_mysql_connection_pool\G;"\
 | grep count_mysql: | awk '{ printf $2 }'`

   if [ `expr ${offline_mysql_count} \* $c` -ge ${mysql_count} -a ${query_active} -eq 1 ] ; then

   SendMessageToDingding "The {{ ansible_hostname }}_{{ ansible_default_ipv4.address }} will adjust all read requests to the primary\nbecause the number of offline MySQL is more than or equal to half!"

   echo "The {{ ansible_hostname }}_{{ ansible_default_ipv4.address }} will adjust all read requests to the primary because the number of offline MySQL is more than or equal to half!" > /var/lib/proxysql/abnormal_mysql_query_rules_`date +%Y%m%d%H%M%S`.log 

   mysql --login-path=proxysql \
-e "update mysql_query_rules set active=0 where destination_hostgroup is not null and destination_hostgroup <> 10;load mysql query rules to runtime;save mysql query rules to disk;"

      #else echo "The {{ ansible_hostname }}_{{ ansible_default_ipv4.address }} has adjusted all read requests to the primary."

   elif [ `expr ${offline_mysql_count} \* $c` -lt ${mysql_count} -a ${query_active} -ne 1 ] ; then

   SendMessageToDingding "The {{ ansible_hostname }}_{{ ansible_default_ipv4.address }} will adjust all read requests to the secondary\nbecause the number of offline MySQL is less than half!"

   echo "The {{ ansible_hostname }}_{{ ansible_default_ipv4.address }} will adjust all read requests to the secondary because the number of offline MySQL is more than or equal to half!" > /var/lib/proxysql/normal_mysql_query_rules_`date +%Y%m%d%H%M%S`.log 

   mysql --login-path=proxysql \
-e "update mysql_query_rules set active=1 where destination_hostgroup is not null and destination_hostgroup <> 10;load mysql query rules to runtime;save mysql query rules to disk;"

	   #else echo "The {{ ansible_hostname }}_{{ ansible_default_ipv4.address }} has adjusted all read requests to the secondary."

   else

   mysql --login-path=proxysql\
-e "select * from runtime_mysql_servers;select * from stats_mysql_connection_pool;"

   offline_mysql_server=`mysql --login-path=proxysql \
-e "select distinct(a.srv_host) as offline_mysql_server from stats_mysql_connection_pool a join mysql_group_replication_hostgroups b on a.hostgroup=b.offline_hostgroup\G;"\
 | grep offline_mysql_server: | awk '{ printf $2 }'`

   if [ -n ${offline_mysql_server} ]

   then 

   transactions_behind=`mysql --login-path=${offline_mysql_server} -e "SELECT transactions_behind FROM sys.gr_member_routing_candidate_status\G;"\
 | grep transactions_behind: | awk '{ printf $2 }'`

   SendMessageToDingding "The number of backward transactions for ${offline_mysql_server} is ${transactions_behind}."

   fi

   fi

fi

}

auto_adjust_mysql_query_rules
