#file proxysql.cfg

########################################################################################
# This config file is parsed using libconfig , and its grammar is described in:        
# http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-File-Grammar 
# Grammar is also copied at the end of this file                                       
########################################################################################

########################################################################################
# IMPORTANT INFORMATION REGARDING THIS CONFIGURATION FILE:                             
########################################################################################
# On startup, ProxySQL reads its config file (if present) to determine its datadir. 
# What happens next depends on if the database file (disk) is present in the defined
# datadir (i.e. "/var/lib/proxysql/proxysql.db").
#
# If the database file is found, ProxySQL initializes its in-memory configuration from 
# the persisted on-disk database. So, disk configuration gets loaded into memory and 
# then propagated towards the runtime configuration. 
#
# If the database file is not found and a config file exists, the config file is parsed 
# and its content is loaded into the in-memory database, to then be both saved on-disk 
# database and loaded at runtime.
#
# IMPORTANT: If a database file is found, the config file is NOT parsed. In this case
#            ProxySQL initializes its in-memory configuration from the persisted on-disk
#            database ONLY. In other words, the configuration found in the proxysql.cnf
#            file is only used to initial the on-disk database read on the first startup.
#
# In order to FORCE a re-initialise of the on-disk database from the configuration file 
# the ProxySQL service should be started with "service proxysql initial".
#
########################################################################################

datadir="/var/lib/proxysql"
errorlog="/var/lib/proxysql/proxysql.log"

admin_variables=
{
{% if admin_web_enabled is defined %}
        web_enabled = "{{ admin_web_enabled }}"
        {% endif %}
   mysql_ifaces="{{ admin_mysql_ifaces }}"
}

mysql_variables=
{
	    interfaces="{{ mysql_interfaces }}"
        shun_recovery_time_sec={{ mysql_shun_recovery_time_sec }}
        threads={{ mysql_threads }}
        query_digests_lowercase="{{ mysql_query_digests_lowercase }}"
        query_cache_size_MB={{ mysql_query_cache_size_MB }}
        threshold_resultset_size ={{ mysql_threshold_resultset_size }}
        monitor_username="{{ mysql_monitor_username }}"
        monitor_connect_interval={{ mysql_monitor_connect_interval }}
        monitor_ping_interval={{ mysql_monitor_ping_interval }}
        monitor_read_only_interval={{ mysql_monitor_read_only_interval }}
        default_charset="{{ mysql_default_charset }}"
        max_connections={{ mysql_max_connections }}
        server_version="{{ mysql_server_version }}"
        max_allowed_packet={{ mysql_max_allowed_packet }}
        default_sql_mode="{{ mysql_default_sql_mode }}"
        admin-stats_mysql_query_digest_to_disk=1
        mysql-monitor_groupreplication_max_transactions_behind_count={{ max_transactions_behind }}
        mysql-wait_timeout={{ mysql_wait_timeout }}
        mysql-log_unhealthy_connections='false'
}


# defines all the MySQL servers
mysql_servers =
(
{% for srv in groups.mgr_pro1 %}
  {
    address="{{ hostvars[srv]['inventory_hostname_short'] }}",
    port={{ mysql_port }},
    hostgroup={{ writer_hostgroup }},
    max_connections={{ max_connections }},
    compression=1
  }{% if not loop.last %},{% endif %}
{% endfor %}
)


# defines all the MySQL users
mysql_users:
(
#	{
#		username = "username" # no default , required
#		password = "password" # default: ''
#		default_hostgroup = 0 # default: 0
#		active = 1            # default: 1
#	},
#	{
#		username = "root"
#		password = ""
#		default_hostgroup = 0
#		max_connections=1000
#		default_schema="test"
#		active = 1
#	},
#	{ username = "user1" , password = "password" , default_hostgroup = 0 , active = 0 }
)



#defines MySQL Query Rules
mysql_query_rules:
(
{
{%if navicat_query_rule == True %}
  rule_id={{ rule_id }}
  active={{ active }}
  match_digest="{{ match_digest }}"
  multiplex={{ multiplex }}
  {% endif %}
},
{ 
  rule_id=2
  active=1
  match_digest="^select.*for update$"
  destination_hostgroup={{ writer_hostgroup }}
  apply=1
},
{
  rule_id=3
  active=1
  match_digest="^select.*from"
  destination_hostgroup={{ reader_hostgroup }}
  apply=1
  cache_ttl={{ cache_ttl }}
}
)


scheduler=
(
#  {
#    id=1
#    active=0
#    interval_ms=10000
#    filename="/var/lib/proxysql/proxysql_galera_checker.sh"
#    arg1="0"
#    arg2="0"
#    arg3="0"
#    arg4="1"
#    arg5="/var/lib/proxysql/proxysql_galera_checker.log"
#  }
)


mysql_replication_hostgroups=
(
#        {
#                writer_hostgroup=30
#                reader_hostgroup=40
#                comment="test repl 1"
#       },
#       {
#                writer_hostgroup=50
#                reader_hostgroup=60
#                comment="test repl 2"
#        }
)


mysql_group_replication_hostgroups=
(
{
{%if proxysql_group_replication_hostgroups is defined %}
  writer_hostgroup={{ writer_hostgroup }}
  backup_writer_hostgroup={{ backup_writer_hostgroup }}
  reader_hostgroup={{ reader_hostgroup }}
  offline_hostgroup={{ offline_hostgroup }}
  active={{ group_replication_active }}
  writer_is_also_reader={{ writer_is_also_reader }}
  max_transactions_behind={{ max_transactions_behind }}
{% endif %}
}
)


# http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-File-Grammar
#
# Below is the BNF grammar for configuration files. Comments and include directives are not part of the grammar, so they are not included here. 
#
# configuration = setting-list | empty
#
# setting-list = setting | setting-list setting
#     
# setting = name (":" | "=") value (";" | "," | empty)
#     
# value = scalar-value | array | list | group
#     
# value-list = value | value-list "," value
#     
# scalar-value = boolean | integer | integer64 | hex | hex64 | float
#                | string
#     
# scalar-value-list = scalar-value | scalar-value-list "," scalar-value
#     
# array = "[" (scalar-value-list | empty) "]"
#     
# list = "(" (value-list | empty) ")"
#     
# group = "{" (setting-list | empty) "}"
#     
# empty =
